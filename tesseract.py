# -*- coding: utf-8 -*-
"""tesseract.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10eEXwqj4gf2Outzj8WcMqgN5-kBcoIS-
"""

# ğŸ”§ 1. Gerekli kÃ¼tÃ¼phaneleri yÃ¼kle
!apt install tesseract-ocr -y
!apt install tesseract-ocr-tur -y  # TÃ¼rkÃ§e dil paketi
!pip install pytesseract Pillow PyMuPDF

import fitz  # PyMuPDF
import pytesseract
from PIL import Image
import io

pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'
lang = "tur"  # TÃ¼rkÃ§e OCR

# ğŸ”¹ YÃ¼klediÄŸin dosyanÄ±n adÄ± burada
pdf_path = "/content/disiplin_amirleri_yonetmeligi.pdf"   # dosya adÄ±nÄ± buraya yaz

doc = fitz.open(pdf_path)
all_text = ""

for i, page in enumerate(doc):
    print(f"ğŸ“„ Sayfa {i+1} iÅŸleniyor...")
    pix = page.get_pixmap(dpi=300)
    img = Image.open(io.BytesIO(pix.tobytes("png")))
    text = pytesseract.image_to_string(img, lang=lang)
    all_text += f"\n\n=== SAYFA {i+1} ===\n{text}"

with open("pdf_metni.txt", "w", encoding="utf-8") as f:
    f.write(all_text)

print("\nâœ… OCR tamamlandÄ±! Metin 'pdf_metni.txt' dosyasÄ±na kaydedildi.")

import fitz  # PyMuPDF
import pytesseract
from PIL import Image
import io

pytesseract.pytesseract.tesseract_cmd = r'/usr/bin/tesseract'
lang = "tur"  # TÃ¼rkÃ§e OCR

# ğŸ”¹ YÃ¼klediÄŸin dosyanÄ±n adÄ± burada
pdf_path = "/content/2021_kurban.pdf"   # dosya adÄ±nÄ± buraya yaz

doc = fitz.open(pdf_path)
all_text = ""

for i, page in enumerate(doc):
    print(f"ğŸ“„ Sayfa {i+1} iÅŸleniyor...")
    pix = page.get_pixmap(dpi=300)
    img = Image.open(io.BytesIO(pix.tobytes("png")))
    text = pytesseract.image_to_string(img, lang=lang)
    all_text += f"\n\n=== SAYFA {i+1} ===\n{text}"

with open("pdf_metni.txt", "w", encoding="utf-8") as f:
    f.write(all_text)

print("\nâœ… OCR tamamlandÄ±! Metin 'pdf_metni.txt' dosyasÄ±na kaydedildi.")

pip install python-doctr[torch] pymupdf

from doctr.io import DocumentFile
from doctr.models import ocr_predictor
import fitz  # PyMuPDF
import json

# ğŸ“„ 1. PDF yolu
pdf_path = "/content/disiplin_amirleri_yonetmeligi.pdf"

# ğŸ”¹ 2. docTR OCR modelini yÃ¼kle
model = ocr_predictor(pretrained=True)

# ğŸ”¹ 3. PDF'i oku (taranmÄ±ÅŸ olduÄŸu iÃ§in her sayfa gÃ¶rsel olarak alÄ±nÄ±r)
pdf_doc = fitz.open(pdf_path)
images = []

for page in pdf_doc:
    pix = page.get_pixmap(dpi=300)
    img_bytes = pix.tobytes("png")
    images.append(img_bytes)

# ğŸ”¹ 4. docTR modeline OCR gÃ¶nder
doc = DocumentFile.from_images(images)
result = model(doc)

# ğŸ”¹ 5. Sonucu JSON olarak al
output = result.export()

# ğŸ”¹ 6. Metin + tablo yapÄ±sÄ±nÄ± ayÄ±r
plain_text = ""
tables = []

for page_idx, page in enumerate(output["pages"]):
    plain_text += f"\n\n=== SAYFA {page_idx + 1} ===\n"
    for block in page["blocks"]:
        block_type = block["type"]
        content = " ".join([w["value"] for l in block["lines"] for w in l["words"]])
        if "table" in block_type.lower():
            tables.append(content)
        else:
            plain_text += content + "\n"

# ğŸ”¹ 7. DÃ¼z metni kaydet
with open("tum_metn.txt", "w", encoding="utf-8") as f:
    f.write(plain_text)

# ğŸ”¹ 8. Tablo metinlerini kaydet (dilersen CSVâ€™ye dÃ¶nÃ¼ÅŸtÃ¼r)
with open("tablolar.txt", "w", encoding="utf-8") as f:
    for t in tables:
        f.write(t + "\n\n")

# (Ä°steÄŸe baÄŸlÄ±) JSON Ã§Ä±ktÄ±sÄ±
with open("ocr_sonuc.json", "w", encoding="utf-8") as f:
    json.dump(output, f, ensure_ascii=False, indent=2)

print("âœ… TÃ¼m sayfalar iÅŸlendi! Metin ve tablolar ayrÄ± kaydedildi.")